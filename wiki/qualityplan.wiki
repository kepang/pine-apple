#summary the Quality Plan Document.

= Quality Plan =

== 1) Test Case Tools and Test Case Management ==

In this section, the necessary test tools for automated testing will be outlined as well as the test coverage.  Coverage is divided into four categories and details are which are described in the appropriate section.

=== Unit Testing ===

Automated iPhone unit testing will be performed with OCUnit, which is written by Sen:te and integrated with XCode.  However, special configuration work is needed to get it to run properly with the iPhone SDK.  The details are provided in this link: http://www.sente.ch/s/?p=535&lang=en.
Simpletest is an open source unit test framework for PHP.  As such, it is ideal for automated unit testing of the web server application in the iClicky system.  More information can be found on their website at http://www.simpletest.org/.

=== Feature Testing ===

Feature testing for both the client and server will be performed manually.  The test cases will be based upon the feature list in order to verify functionality of the client and server applications completely.  As such, coverage will include the following features:

_Client_

 * 1.	One time user information
 * 2.	Lecture login
  * 2.1	Automated attendance recording

 * 3.	Quiz
  * 3.1   Display Question
  * 3.2    Submit Button
 * 4.	Display Completed Quizzes
 * 5.	Help
  * 5.1   Report Bugs

_Server_

 * 1.	User Manager
  * 1.1	Manage Admin Account
   * 1.1.1  Username
   * 1.1.2  Password
   * 1.1.3  Name
   * 1.1.4  Email
   * 1.1.5  City
   * 1.1.6  School
   * 1.1.7  Job
  * 1.2	Manage Student Accounts
   * 1.2.1  Student
   * 1.2.2  Name
   * 1.2.3  Email
 * 2.	Class Manager
  * 2.1	Manage Classes
   * 2.1.1  Class Name
   * 2.1.2  Number of Lectures
  * 2.2	Select Students
 * 3.	Lecture Manager
  * 3.1	Manage Lecture
   * 3.1.1	Set Lecture Password
   * 3.1.2	Start Lecture
   * 3.1.3	Stop Lecture
 * 4.	Quiz Manager
  * 4.1	Manage Quizzes
   * 4.1.1	Set Question
   * 4.1.2	Receive Result from Client
 * 5.	Attendance Recorder
 * 6.	Display Results
  * 6.1	Attendance Results filtered by Lecture
  * 6.2	Attendance Results filtered by Student
  * 6.3	Quiz Scores filtered by Lecture
  * 6.4	Quiz Scores filtered by Student
  * 6.5	Quiz Results filtered by Question

=== System Testing ===

System Testing will cover the cases where there is communication between a) the client and server and b) server and database.  Indeed, feature testing does overlap with system testing, and much of the system testing needs will be satisfied by feature level tests.  Consequently, those use cases scenarios and tests that are covered by both categories of testing will only need to be performed once.  The remaining will be performed solely as a system level test.

=== Non-Functional Testing ===

Non-Functional testing will cover the five categories outlined in the Non-Functional requirements.  As these requirements are applied across the entire system, a set of test cases will be derived from Feature and System testing and repeated various times in various orders to simulate real world use.  This will ensure that the system is verified against speed, ease of use, reliability, robustness, and portability requirements.

== 2) Internal Deadlines ==

For each of the three versions, there will be three phases in the development cycle:
1)	Implementation
2)	Testing
3)	Bug Fix
Each of these phases will have its own internal deadline and must be completed in order to facilitate the progression to the next phase.  First, the application will be coded during the implementation phase.  When this is complete, the testing phase is entered in which unit, feature, system, and non-functional level testing will be performed.  A list of defects will be compiled as a result.  Finally, from this list, bug fixing will take place before the final build is submitted.
The schedule and internal deadlines for all three versions is shown in Gantt chart format as well as in table format below.
 

	||Version 1||Version 2||Version 3
Implementation||June 11-23||July 3 -10||July 17-24
Testing	June||24-27||July 11||July 25-26
Bug Fix	June||28-July 7||July 12-15||July 27-29



== 3) Acceptance Setting ==

We are going to do a user testing for our final version of the project.
Time: 12:00 pm
Date: 28 July 2009
Location: Simon Fraser University

We are going to ask some students to look at our final project, and this is the steps 

Step:
1. Create an Admin account for testing.
2. Ask the user to open the iClicky website 
3. Let the users to register an account. 
4. Use I-phone to open the iClicky application.
5. We will provide the sample quizzes
6. The user will do the quiz
7. Check their scores in iClicky.
8. Ask their opinion about the program.

Question:
1.	What do you think of the program?       1     2     3     4     5
2.	How hard is it to use the program?        1     2     3     4     5
3.	Would you buy this application?
4.	Are you willing to use the application?
5.	Any suggestion to improve the application?
6.	Do you think your professor would likely use this application?